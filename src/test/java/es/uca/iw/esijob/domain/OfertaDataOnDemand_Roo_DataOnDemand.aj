// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.esijob.domain;

import es.uca.iw.esijob.domain.Contrato;
import es.uca.iw.esijob.domain.ContratoDataOnDemand;
import es.uca.iw.esijob.domain.Estado;
import es.uca.iw.esijob.domain.Formacion;
import es.uca.iw.esijob.domain.FormacionDataOnDemand;
import es.uca.iw.esijob.domain.Oferta;
import es.uca.iw.esijob.domain.OfertaDataOnDemand;
import es.uca.iw.esijob.domain.Sede;
import es.uca.iw.esijob.domain.SedeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OfertaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OfertaDataOnDemand: @Component;
    
    private Random OfertaDataOnDemand.rnd = new SecureRandom();
    
    private List<Oferta> OfertaDataOnDemand.data;
    
    @Autowired
    FormacionDataOnDemand OfertaDataOnDemand.formacionDataOnDemand;
    
    @Autowired
    SedeDataOnDemand OfertaDataOnDemand.sedeDataOnDemand;
    
    @Autowired
    ContratoDataOnDemand OfertaDataOnDemand.contratoDataOnDemand;
    
    public Oferta OfertaDataOnDemand.getNewTransientOferta(int index) {
        Oferta obj = new Oferta();
        setEstado(obj, index);
        setFecFinOferta(obj, index);
        setFecIniOferta(obj, index);
        setFechaInc(obj, index);
        setIdformacion(obj, index);
        setIdsede(obj, index);
        setInfoPuesto(obj, index);
        setNumVac(obj, index);
        setPerfilDem(obj, index);
        setSalarioBruto(obj, index);
        setTipoContrato(obj, index);
        setTitulo(obj, index);
        return obj;
    }
    
    public void OfertaDataOnDemand.setEstado(Oferta obj, int index) {
        Estado estado = null;
        obj.setEstado(estado);
    }
    
    public void OfertaDataOnDemand.setFecFinOferta(Oferta obj, int index) {
        Date fecFinOferta = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecFinOferta(fecFinOferta);
    }
    
    public void OfertaDataOnDemand.setFecIniOferta(Oferta obj, int index) {
        Date fecIniOferta = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecIniOferta(fecIniOferta);
    }
    
    public void OfertaDataOnDemand.setFechaInc(Oferta obj, int index) {
        Date fechaInc = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaInc(fechaInc);
    }
    
    public void OfertaDataOnDemand.setIdformacion(Oferta obj, int index) {
        Formacion idformacion = formacionDataOnDemand.getRandomFormacion();
        obj.setIdformacion(idformacion);
    }
    
    public void OfertaDataOnDemand.setIdsede(Oferta obj, int index) {
        Sede idsede = sedeDataOnDemand.getRandomSede();
        obj.setIdsede(idsede);
    }
    
    public void OfertaDataOnDemand.setInfoPuesto(Oferta obj, int index) {
        String infoPuesto = "infoPuesto_" + index;
        if (infoPuesto.length() > 1024) {
            infoPuesto = infoPuesto.substring(0, 1024);
        }
        obj.setInfoPuesto(infoPuesto);
    }
    
    public void OfertaDataOnDemand.setNumVac(Oferta obj, int index) {
        Integer numVac = new Integer(index);
        obj.setNumVac(numVac);
    }
    
    public void OfertaDataOnDemand.setPerfilDem(Oferta obj, int index) {
        String perfilDem = "perfilDem_" + index;
        if (perfilDem.length() > 1024) {
            perfilDem = perfilDem.substring(0, 1024);
        }
        obj.setPerfilDem(perfilDem);
    }
    
    public void OfertaDataOnDemand.setSalarioBruto(Oferta obj, int index) {
        Integer salarioBruto = new Integer(index);
        obj.setSalarioBruto(salarioBruto);
    }
    
    public void OfertaDataOnDemand.setTipoContrato(Oferta obj, int index) {
        Contrato tipoContrato = contratoDataOnDemand.getRandomContrato();
        obj.setTipoContrato(tipoContrato);
    }
    
    public void OfertaDataOnDemand.setTitulo(Oferta obj, int index) {
        String titulo = "titulo_" + index;
        if (titulo.length() > 128) {
            titulo = titulo.substring(0, 128);
        }
        obj.setTitulo(titulo);
    }
    
    public Oferta OfertaDataOnDemand.getSpecificOferta(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Oferta obj = data.get(index);
        Integer id = obj.getId();
        return Oferta.findOferta(id);
    }
    
    public Oferta OfertaDataOnDemand.getRandomOferta() {
        init();
        Oferta obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Oferta.findOferta(id);
    }
    
    public boolean OfertaDataOnDemand.modifyOferta(Oferta obj) {
        return false;
    }
    
    public void OfertaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Oferta.findOfertaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Oferta' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Oferta>();
        for (int i = 0; i < 10; i++) {
            Oferta obj = getNewTransientOferta(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
